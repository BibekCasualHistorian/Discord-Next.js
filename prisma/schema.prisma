// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  MODERATOR
  ADMIN
  USER
}

model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  channels Channel[]

  members Member[]

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MemberRole {
  ADMIN
  MODERATOR 
  GUEST
}
 

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  messages Message[]

  directMessages DirectMessage[]
  
  conversationInitiated Conversation[] @relation("MemberOne")
  conversationReceived Conversation[] @relation("MemberTwo")

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Message {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text
  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([channelId])
  @@index([memberId])

}
model Conversation {
  id String @id @default(uuid())
   memberOneId String
   memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

   memberTwoId String
   memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

   directMessages DirectMessage[]

@@index([memberOneId])
@@index([memberTwoId])

@@unique([memberOneId, memberTwoId])
}

model DirectMessage {
  id String @id @default(uuid())
content String @db.Text
fileUrl String? @db.Text

memberId String
member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

conversationId String
conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

deleted Boolean @default(false)

@@index([memberId])
@@index([conversationId])

createdAt DateTime @default(now())
updatedAt DateTime @updatedAt
}


model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  messages Message[]

  userId String
  user User @relation(fields: [userId], references: [id])

  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  channels Channel[]

  members Member[]
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  servers Server[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}